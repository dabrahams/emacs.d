
* General Config

#+BEGIN_SRC emacs-lisp

  (setq inhibit-default-init t)

#+END_SRC

** Use Package

Install use-package to make package management and configuration nicer.

#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)

#+END_SRC

** Custom

#+BEGIN_SRC emacs-lisp

  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)

#+END_SRC

** Mac keys

   Different distributions of Emacs on macOS have different ideas
   about what the Command and Option keys should do, so be explicit
   here to make the consistent.

#+BEGIN_SRC emacs-lisp

  (setq mac-option-modifier 'none
        mac-command-modifier 'super
        mac-right-command-modifier 'meta)

  (global-set-key (kbd "s-a") #'mark-whole-buffer)
  (global-set-key (kbd "s-k") #'kill-this-buffer)
  (global-set-key (kbd "s-l") #'goto-line)
  (global-set-key (kbd "s-q") #'save-buffers-kill-terminal)
  (global-set-key (kbd "s-s") #'save-buffer)
  (global-set-key (kbd "s-w") #'delete-frame)

#+END_SRC

   Add some text scaling bindings similar to other macOS apps.

#+BEGIN_SRC emacs-lisp

  (defun jafo-text-scale-reset ()
    "Reset text scaling to base size."
    (interactive)
    (text-scale-set 0))

  (global-set-key (kbd "s-+") #'text-scale-increase)
  (global-set-key (kbd "s-=") #'text-scale-increase)
  (global-set-key (kbd "s--") #'text-scale-decrease)
  (global-set-key (kbd "s-0") #'jafo-text-scale-reset)

#+END_SRC

** Help

   [[https://github.com/justbur/emacs-which-key][Which key]] provides visual guidance on incomplete key chords which
   aids in discovery.

#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :demand t
    :diminish ""
    :bind ("C-h C-k" . which-key-show-top-level)
    :config
    (setq which-key-idle-delay 0.2
          which-key-add-column-padding 0)
    (which-key-declare-prefixes
     "<SPC> g" '("scm" . "Magit, git, scm commands")
     "<SPC> p" '("projectile" . "Projectile commands")
     "<SPC> d" '("deft" . "notes: deft, etc")
     "<SPC> o" '("org" . "org mode")
     "<SPC> u" "package"
     "<SPC> n" "narrow"
     )
    (which-key-mode t))

#+END_SRC

   [[https://github.com/steckerhalter/discover-my-major][Discover My Major]] displays keybindings for the current major mode.

#+BEGIN_SRC emacs-lisp

  (use-package discover-my-major
    :ensure t
    :bind ("C-h C-m" . discover-my-major)
    :config
    (with-eval-after-load 'evil
      (evil-set-initial-state 'makey-key-mode 'motion)))

#+END_SRC

* UI

** Theme

#+BEGIN_SRC emacs-lisp

  (use-package apropospriate-theme
    :ensure t
    :config (load-theme 'apropospriate-dark t))

#+END_SRC

** Fonts

   [[https://github.com/adobe-fonts][Adobe's "Source" family of fonts]] are quite nice, and [[https://github.com/i-tu/Hasklig][Hasklig]] is a
   derivative of [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] that adds many programming
   ligatures. Use of the ligatures requires using the railwaycat emacs
   port with mac-auto-operator-composition-mode enabled.

   On macOS these fonts can be installed with [[https://caskroom.github.io][Homebrew Cask]].

#+BEGIN_SRC emacs-lisp

  (prefer-coding-system 'utf-8-unix)

  (set-face-attribute 'default nil
                      :family "Hasklig"
                      :height 120
                      :weight 'normal)

  (set-face-attribute 'variable-pitch nil
                      :family "Source Sans Pro"
                      :height 120
                      :weight 'normal)

#+END_SRC

   Additionally configure some icon fonts that add various programming
   related glyphs to the private use area:

   - [[http://fontawesome.io][Font Awesome]]
   - [[http://vorillaz.github.io/devicons/#/main][Devicons]]

#+BEGIN_SRC emacs-lisp

  ;; FontAwesome private use area, e.g. Rebel logo: 
  ;; https://fortawesome.github.io/Font-Awesome/
  (set-fontset-font t '(#xf000 . #xf3ff)
                    (font-spec :family "FontAwesome")
                    nil 'prepend)

  ;; devicons private use area, e.g. React logo: 
  ;; http://vorillaz.github.io/devicons/#/main
  (set-fontset-font t '(#xe600 . #xe6ff)
                    (font-spec :family "icomoon")
                    nil 'prepend)

#+END_SRC

** Chrome

#+BEGIN_SRC emacs-lisp

  (setq
   indicate-empty-lines t
   inhibit-startup-screen t
   initial-scratch-message nil
   ring-bell-function 'ignore
   scroll-conservatively 10000
   scroll-preserve-screen-position t
   use-dialog-box nil
   )

  (setq-default
   cursor-in-non-selected-windows nil
   )

  (fset 'yes-or-no-p #'y-or-n-p)

  (global-hl-line-mode t)
  (global-visual-line-mode 0)
  (line-number-mode 0)
  (scroll-bar-mode 0)
  (show-paren-mode t)
  (tool-bar-mode 0)

#+END_SRC

** Indent Guide

   [[https://github.com/zk-phi/indent-guide][Indent Guide]] draws a vertical line indicator to show the
   indentation level of the current block. This is useful in
   programming modes, less so in text modes. It also can require some
   tweaking to get the face to look right with your theme.

#+BEGIN_SRC emacs-lisp

  (use-package indent-guide
    :ensure t
    :diminish ""
    :config
    (setq indent-guide-char "│")
    (add-hook 'prog-mode-hook #'indent-guide-mode))

#+END_SRC

* Evil

  [[https://github.com/emacs-evil/evil][Evil mode]] is an impressively complete Vim emulation layer for
  emacs. With evil mode, emacs can act as a better vim than vim itself
  due to having a much more flexible platform upon which to build an
  editor ecosystem.
  
#+BEGIN_SRC emacs-lisp

  (use-package evil
    :ensure t
    :demand t
    :bind (:map evil-motion-state-map
                ("j" . evil-next-visual-line)
                ("k" . evil-previous-visual-line)
                ("C-j" . evil-scroll-down)
                ("C-k" . evil-scroll-up)
           :map evil-normal-state-map
                ("[ q" . previous-error)
                ("] q" . next-error)
                ("-" . dired-jump))
    :init
    (setq evil-mode-line-format '(before . mode-line-front-space)
          evil-want-C-w-in-emacs-state t
          evil-want-Y-yank-to-eol t
          evil-visual-state-cursor 'hollow)
    :config
    (add-hook 'git-commit-mode-hook #'evil-insert-state)
    (evil-define-key 'normal dired-mode-map "-" 'dired-up-directory)
    (evil-mode t))

    (use-package evil-commentary
      :ensure t
      :after evil
      :diminish ""
      :config (evil-commentary-mode))

    (use-package evil-surround
      :ensure t
      :after evil
      :config (global-evil-surround-mode t))

    (use-package evil-quickscope
      :ensure t
      :after evil
      :config (global-evil-quickscope-mode t))

#+END_SRC

* Org mode

** Package + contrib

  Use an up-to-date version of [[http://orgmode.org][Org mode]] from the [[Org package archive]],
  and include the optional contributed features and packages.

#+BEGIN_SRC emacs-lisp

  (use-package org
    :ensure org-plus-contrib
    :pin org
    :demand t
    :mode ("\\.org$" . org-mode)
    :bind (:map evil-normal-state-map
                ("<SPC> o a" . org-agenda)
                ("<SPC> o b" . org-ido-switchb)
                ("<SPC> o c" . org-capture)
                ("<SPC> o l" . org-store-link)
           :map evil-motion-state-map
                ("[ [" . org-previous-visible-heading)
                ("] ]" . org-next-visible-heading))
    :init
    (setq
          org-completion-use-ido t
          org-deadline-warning-days 3
          org-default-notes-file "~/Documents/gtd.org"
          org-ellipsis " …"
          org-enforce-todo-dependencies t
          org-export-with-toc nil
          org-hide-leading-stars t
          org-log-done t
          org-log-into-drawer t
          org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-targets '((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9))
          org-refile-use-outline-path t
          org-return-follows-link t
          org-src-fontify-natively t
          org-startup-indented t)
    (set-face-attribute 'org-level-1 nil :height 1.6 :weight 'semi-bold)
    (set-face-attribute 'org-level-2 nil :height 1.4 :weight 'semi-bold)
    (set-face-attribute 'org-level-3 nil :height 1.2)
    (set-face-attribute 'org-level-4 nil :height 1.1)
    (set-face-attribute 'org-block nil :foreground nil) ; org 9... seems a bug in apropospriate
    :config
    (use-package org-checklist)
    (use-package org-mime))

#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp

  (use-package org-agenda
    :init
    (setq org-agenda-files '("~/Documents/gtd.org")
          org-agenda-repeating-timestamp-show-all t
          org-agenda-restore-windows-after-quit t
          org-agenda-skip-deadline-if-done t
          org-agenda-skip-scheduled-if-done t
          org-agenda-start-on-weekday nil)
    :config
    (org-add-agenda-custom-command
     '("d" "Deadlines and scheduled work" alltodo ""
       ((org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline))
        (org-agenda-prefix-format '((todo . " %i %-22(org-entry-get nil \"DEADLINE\") %-12:c %s")))
        (org-agenda-sorting-strategy '(deadline-up)))))
    )

#+END_SRC

* Version Control

** Magit

[[https://magit.vc][Magit]] is the best interface for git, period.

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :bind (:map evil-normal-state-map
                ("<SPC> g b" . magit-blame)
                ("<SPC> g c" . magit-clone)
                ("<SPC> g d" . magit-diff-buffer-file-popup)
                ("<SPC> g l" . magit-log-buffer-file)
                ("<SPC> g s" . magit-status)
                )
    :config
    (use-package evil-magit :ensure t)
    (magit-define-popup-switch 'magit-log-popup
                               ?m "Omit merge commits" "--no-merges")
    (setq magit-completing-read-function #'magit-ido-completing-read))

#+END_SRC
